# -*- coding: utf-8 -*-
"""app_car

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VBpSpCPV13SY183QZgRaYNfWKW9ASw06
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
import pickle

st.set_page_config(page_title="Car Price Prediction Dashboard", layout="wide")

st.title("ðŸš— Car Price Prediction Dashboard")
st.markdown("This app loads a pre-trained car price prediction model and allows users to input parameters to predict the car's price.")

# --- Load model directly from local path ---
MODEL_PATH = "car_price_model.pkl"

@st.cache_resource
def load_model():
    with open(MODEL_PATH, "rb") as f:
        model_data = pickle.load(f)
    if isinstance(model_data, dict):
        model = model_data.get("model", model_data)
        columns = model_data.get("columns", None)
    else:
        model = model_data
        columns = None
    return model, columns

try:
    model, feature_columns = load_model()
    st.sidebar.success("âœ… Model loaded successfully!")
except Exception as e:
    st.sidebar.error(f"Error loading model: {e}")
    st.stop()

# --- Define Inputs ---
st.header("ðŸ”§ Input Parameters")

# If feature columns available, use them to build input form dynamically
if feature_columns:
    st.info("Model feature columns detected automatically.")
    user_inputs = {}
    with st.form("input_form"):
        for col in feature_columns:
            if any(x in col.lower() for x in ["year", "age", "km", "mileage", "engine", "power"]):
                user_inputs[col] = st.number_input(f"{col}", min_value=0.0, step=0.1)
            elif any(x in col.lower() for x in ["fuel", "seller", "transmission", "owner"]):
                user_inputs[col] = st.text_input(f"{col}", placeholder="Enter category value")
            else:
                user_inputs[col] = st.text_input(f"{col}")
        submitted = st.form_submit_button("Predict Price")
else:
    st.warning("Feature names not found in model. Please enter the parameters manually.")
    with st.form("manual_form"):
        year = st.number_input("Year of Manufacture", min_value=1990, max_value=2025, value=2015)
        km_driven = st.number_input("Kilometers Driven", min_value=0, value=50000)
        fuel_type = st.selectbox("Fuel Type", ["Petrol", "Diesel", "CNG", "LPG", "Electric"])
        transmission = st.selectbox("Transmission", ["Manual", "Automatic"])
        owner_type = st.selectbox("Owner Type", ["First", "Second", "Third", "Fourth & Above"])
        mileage = st.number_input("Mileage (kmpl)", min_value=0.0, step=0.1)
        engine = st.number_input("Engine Capacity (cc)", min_value=0.0, step=10.0)
        power = st.number_input("Power (bhp)", min_value=0.0, step=1.0)
        submitted = st.form_submit_button("Predict Price")

        user_inputs = {
            "year": year,
            "km_driven": km_driven,
            "fuel_type": fuel_type,
            "transmission": transmission,
            "owner_type": owner_type,
            "mileage": mileage,
            "engine": engine,
            "power": power
        }

# --- Make Prediction ---
if submitted:
    input_df = pd.DataFrame([user_inputs])

    st.write("### ðŸ§¾ Input Summary")
    st.dataframe(input_df)

    try:
        prediction = model.predict(input_df)[0]
        st.success(f"ðŸ’° **Predicted Car Price: â‚¹{prediction:,.2f}**")
    except Exception as e:
        st.error(f"Prediction failed: {e}")
        st.stop()

st.markdown("---")
st.caption("Built with Streamlit | Car Price Predictor Â© 2025")